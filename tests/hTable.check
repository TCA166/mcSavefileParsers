#include "../hTable.h"
#include <stdio.h>
#include <stdlib.h>

#suite hTableTests

#test insertTest
    hashTable* testTable = initHashTable(2000);
    //Inserts the pointer to the same value for plenty of keys in the hash table
    for(int i=32; i<127; i++){
        char key[2] = " \0";
        key[0] = i;
        insertHashItem(testTable, key, &i);
        int* val = (int*)getVal(testTable, key);
        ck_assert_msg(*val == i, "Couldn't get the value back right after insertion");
    }
    //Tries getting the values back, should get multiple 127 every time
    for(int i=32; i<127; i++){
        char key[2] = " \0";
        key[0] = i;
        int* val = (int*)getVal(testTable, key);
        ck_assert_msg(*val == 127, "Got the wrong value back");
    }
    freeHashTable(testTable);

#test updateTest
    hashTable* testTable = initHashTable(2000);
    //Tries updating the hashTable with matching keys
    for(int i=32; i<127; i++){
        char key[2] = " \0";
        key[0] = i;
        int oldSize = insertHashItem(testTable, key, &i);
        int newSize = insertHashItem(testTable, key, &i);
        //If the returned values don't match something was inserted
        ck_assert_msg(oldSize == newSize, "Sizes differ");
    }
    freeHashTable(testTable);

#test readingTest
    hashTable* testTable = initHashTable(2000);
    //Inserts the pointer to the same value for plenty of keys in the hash table
    for(int i=32; i<127; i++){
        char key[2] = " \0";
        key[0] = i;
        int* val = malloc(sizeof(int));
        *val = i;
        insertHashItem(testTable, key, val);
    }
    //Tries getting the values back, should get multiple 127 every time
    for(int i=32; i<127; i++){
        char key[2] = " \0";
        key[0] = i;
        int* val = (int*)getVal(testTable, key);
        ck_assert_msg(*val == i, "Got the wrong value back");
    }
    freeHashTable(testTable);

#test arrayTest
    hashTable* testTable = initHashTable(2000);
    int count = 0;
    //Inserts the pointer to the same value for plenty of keys in the hash table
    for(int i=32; i<127; i++){
        char key[2] = " \0";
        key[0] = i;
        int* val = malloc(sizeof(int));
        *val = i;
        count = insertHashItem(testTable, key, val);
    }
    int** array = (int**)hashTableToArray(testTable);
    for(int i = 0; i < count; i++){
        ck_assert_msg(array[i] != NULL, "Value in array was NULL");
        int val = *array[i];
        char key[2] = " \0";
        key[0] = val;
        int* oldI = getVal(testTable, key);
        ck_assert_msg(*oldI == val, "Val != i");
    }
    freeHashTable(testTable);